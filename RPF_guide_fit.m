% RPF_guide_fit
%
% Description of the fit struct array of the F struct used in the RPF toolbox. 
% For information on the fit struct contained in the R struct, see
% RPF_guide('R').
% 
% In the F struct, fit is a 1 x nCond struct array whose fields contain 
% information about the fit of the psychometric function specified in the 
% info struct, as applied to the data struct. (See RPF_guide('F'), 
% RPF_guide('info') and RPF_guide('data') for more on these.) Each element 
% in the fit struct array holds fit information for each experimental 
% condition. fit is generated by the function RPF_fit_F_data. 
%
% Most fields of fit are universal, but some depend on the dependent
% variable being analyzed, as specified in info.DV, as well as the type of 
% fit being used, as specified in info.fit_type. Some fields are also 
% redundant with information available elsewere, e.g. in the info struct, 
% for ease of access. 
%
% Below is a listing of the fields of fit in different scenarios.
%
% TYPICAL FIELDS
%
% The following fields are typically contained in fit, with some exceptions
% as noted below. In the following, i_cond is an index referring to 
% condition number.
%
% fit(i_cond).cond_label
%   - a string that labels the current condition (e.g. 'attended')
%   - identical to info.cond_label{i_cond}
%
% fit(i_cond).DV
%   - a string denoting the dependent variable for P = F(x)
%   - identical to info.DV
%
% fit(i_cond).DV_respCond
%   - a string denoted which response types are used for the data being fitted
%   - identical to info.DV_respCond
%   - this field is only present in certain applicable cases
%
% fit(i_cond).fit_type
%   - a string specifying the method of function fitting, i.e. maximizing
%     likelhood, minimizing sum of squared errors, or interpolating
%   - identical to info.fit_type
%
% fit(i_cond).constrain
%   - a struct containing information on what constraints to impose on the
%     fitting of the psychometric function
%   - identical to info.constrain
%   - see RPF_guide('constrain') for more information
%
% fit(i_cond).PF
%   - a function handle for the psychometric function F(x) used for the fit
%   - identical to info.PF
%
% fit(i_cond).xt_fn
%   - a function handle determining any transform applied to x for use with
%     info.PF, e.g. @log10 for a log transform.
%   - identical to info.xt_fn
%
% fit(i_cond).xt_fn_inv
%   - a function handle for the inverse of info.xt_fn, e.g. @(x)(10.^x)
%     for the inverse of @log10.
%   - identical to info.xt_fn_inv
%
% fit(i_cond).params
%   - in most cases, a 4-element vector containing the 4 parameters of the
%     psychometric function
%   - for psychometric functions fitted to response probabilities, as
%     indicated by RPF_get_PF_list('PFs_respProb'), these parameters are 
%
%     [alpha, beta, gamma, lambda] 
%
%     where alpha is the location parameter, beta is the slope parameter,
%     gamma is the level of chance performance when x = 0, and lambda
%     is the lapse rate controlling asymptotic performance such that as x
%     approaches infinity, performance approaches 1 - lambda
%   - for scaled psychometric functions, as indicated by 
%     RPF_get_PF_list('PFs_scaled'), these parameters are 
% 
%     [alpha, beta, gamma, omega] 
%
%     where alpha, beta, and gamma are defined as above, and omega is
%     asymptotic performance such that as x approaches infinity,
%     performance approaches omega
%   - the contents of params differ in the special cases of (1) MLE fitting 
%     of mean rating and (2) interpolation, as discussed below
%
% fit(i_cond).logL or fit(i_cond).SSE
%   - the log likelihood or sum of squared errors yielded by the fit,
%     depending on what type of fitting was specified in info.fit_type
%
% fit(i_cond).k
%   - the number of free parameters in the fit
%   - for an unconstrained fit to a typical psychometric function, k = 4
%     corresponding to the 4 PF parameters
%   - however, this number may be lower if any constraints were specified
%     in the constrain struct. e.g. if gamma and lambda were constrained to
%     take values of 0.5 and 0.05, respectively, that would leave only two
%     free parameters to be determined by the fitting, alpha and beta
%   
% fit(i_cond).n
%   - the number of data points used in the fitting procedure
%   - for MLE fitting of response probabilities, d', and meta-d', n is the
%     number of trials used in the fit. e.g. if there are 10 levels of x
%     and 50 trials per level, n = 500
%   - for SSE fitting of the summary measure of the DV at each level of x,
%     n is the number of levels of x. e.g. if there are 10 levels of x, n =
%     10
%
% ADDITIONAL FIELDS FOR MLE FITTING META-D'
%
% The MLE fitting procedure for meta-d' is more complicated than MLE
% fitting for other DVs in the toolbox. Thus, in addition to the above, the 
% fit struct contains the following extra information:
%
% fit(i_cond).meta_d
%   - fitted values of meta-d' at each level of x
% 
% fit(i_cond).c_prime
%   - the values of c' at each level of x derived from the meta-d' toolbox 
%     fit, and subsequently used in the PF fit
%   - identical to data(i_cond).md_fit.c_prime
%
% fit(i_cond).meta_c
%   - the values of meta-c at each level of x used in the PF fit, where
%
%     fit(i_cond).meta_c = data(i_cond).md_fit.c_prime .* fit(i_cond).meta_d;
%
% fit(i_cond).meta_t2c_unadj
%   - the fitted values of meta-t2c arrived at from the PF fit that, in
%     conjunction with the 4 PF parameters in fit(i_cond).param, determine
%     the likelihood of the data according to the model
%   - these are stored in an (nx x nRatings-2) matrix where the nx rows
%     correspond to levels of x and the nRatings-2 columns correspond to 
%     type 2 criteria
%   - these values are "unadjusted" in the sense that for convenience of
%     setting up the MLE fit, they are expressed on a scale where meta-c = 0
%
% fit(i_cond).meta_t2c
%   - same as fit(i_cond).meta_t2c_unadj, but adjusted so that the type 2
%     criteria are expressed on a scale where meta-c matches
%     fit(i_cond).meta_c
%
% fit(i_cond).k_all
%   - whereas fit(i_cond).k reflects the number of free parameters in the
%     PF fit, this field reflects the total number of parameters in the
%     fit, which also includes parameters for the type 2 criteria. thus,
%
%     fit(i_cond).k_all = fit(i_cond).k + numel(fit(i_cond).meta_t2c);
%
%   - however, note that while the fitted type 2 criteria contribute to the
%     MLE fit to the trial-level data, only the 4 (or fewer) parameters of
%     the PF contribue to how well the fitted curve approximates the
%     meta-d' data at each level of x
%
% SPECIAL CASES
%
% MLE FITTING OF MEAN RATING
% --------------------------
% MLE fitting of mean rating follows a somewhat unique procedure in that it
% involves fitting (nRatings-1) PFs for p(high rating), using every
% possible threshold for what ratings count as "high ratings" in [2,
% nRatings]. These MLE fits to each individual p(high rating) data set are 
% then combined to construct the MLE fit for mean rating. 
%
% The fit struct for MLE fitting of mean rating reflects this unique approach.
% Essentially, it stores information about the MLE fit for each individual
% p(high rating) curve separately, rather than having a single top-level
% set of information about the fit.
% 
% fit(i_cond).pHighRating(i_thresh)
%   - pHighRating(i_thresh) is a 1 x nRatings-1 struct array containing 
%     information about the MLE fit for the p(high rating) data at each 
%     possible threshold i_thresh, where the threshold at which ratings are
%     considered to be "high" is defined as i_thresh + 1
%   - each element of pHighRating(i_thresh) contains fields for constrain,
%     PF, xt_fn, params, logL, k, and n, as defined above, corresponding to
%     the MLE fit of p(high rating) at each level of i_thresh
%   - fit(i_cond).pHighRating(i_thresh).PF is identical to info.PF_pHighRating
% 
% fit(i_cond).params
%   - the top-level field fit(i_cond).params is defined differently from
%     how it's defined in the typical case discussed above
%   - here, params is a struct containing two fields, as discussed below
%
% fit(i_cond).params.value
%   - value is an nRatings-1 x 4 matrix holding parameters of the PF
%     (columns) for each level i_thresh of the high rating threshold (rows)
%   - this is just a reformatting of the parameter fit data already
%     contained in fit(i_cond).pHighRating, for convenience of use with the
%     rest of the RPF toolbox
%
% fit(i_cond).params.PF
%   - the PF used for fitting p(high rating)
%   - this is just a reformatting of the PF data already contained in 
%     fit(i_cond).pHighRating, for convenience of use with the rest of the 
%     RPF toolbox
%
% INTERPOLATION
% -------------
% The RPF toolbox treats interpolation as a kind of "fit" to the data by
% means of which a function P = F(x) can be defined and used to compute
% AUC.
%
% The "quality" of the "fit" as measured in metrics like MLE or SSE is
% not of interest since any data set can be "fit" perfectly with
% interpolation, so metrics relating to fit quality, number of parameters,
% and number of data points are not included in the fit struct. 
%
% However, a "parameters" struct containing the information needed to construct 
% the interpolation is included, so that interpolation can be treated similarly
% to fitted functions by the RPF toolbox for the purposes of evaluating the
% "fitted" function with RPF_eval_F to compute AUC.
%
% fit(i_cond).append_xP_min
%   - boolean indicating whether (info.x_min, info.P_min) was appended to 
%     the list of data points used for interpolation
%   - identical to info.append_xP_min
%
% fit(i_cond).append_xP_max
%   - boolean indicating whether (info.x_max, info.P_max) was appended to 
%     the list of data points used for interpolation
%   - identical to info.append_xP_max
%
% fit(i_cond).params.xt
%   - list of x values after transformation by info.xt_fn
%   - identical to info.xt_vals
%
% fit(i_cond).params.P
%   - list of P values (i.e. values of info.DV) at each level of x
%   - identical to data(i_cond).P
%
% fit(i_cond).params.interp_method
%   - interpolation method, as used by the Matlab function @interp1
%   - identical to info.interp_method
